@article{eggpaper,
  author     = {Willsey, Max and Nandi, Chandrakana and Wang, Yisu Remy and Flatt, Oliver and Tatlock, Zachary and Panchekha, Pavel},
  title      = {egg: Fast and extensible equality saturation},
  year       = {2021},
  issue_date = {January 2021},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {5},
  number     = {POPL},
  url        = {https://doi.org/10.1145/3434304},
  doi        = {10.1145/3434304},
  abstract   = {An e-graph efficiently represents a congruence relation over many expressions. Although they were originally developed in the late 1970s for use in automated theorem provers, a more recent technique known as equality saturation repurposes e-graphs to implement state-of-the-art, rewrite-driven compiler optimizations and program synthesizers. However, e-graphs remain unspecialized for this newer use case. Equality saturation workloads exhibit distinct characteristics and often require ad-hoc e-graph extensions to incorporate transformations beyond purely syntactic rewrites. This work contributes two techniques that make e-graphs fast and extensible, specializing them to equality saturation. A new amortized invariant restoration technique called rebuilding takes advantage of equality saturation's distinct workload, providing asymptotic speedups over current techniques in practice. A general mechanism called e-class analyses integrates domain-specific analyses into the e-graph, reducing the need for ad hoc manipulation. We implemented these techniques in a new open-source library called egg. Our case studies on three previously published applications of equality saturation highlight how egg's performance and flexibility enable state-of-the-art results across diverse domains.},
  journal    = {Proc. ACM Program. Lang.},
  month      = jan,
  articleno  = {23},
  numpages   = {29},
  keywords   = {equality saturation, e-graphs},
  annote     = {This paper lies the technical foundation needed to use equality-saturation effectively. The authors provide an extensible library for building e-graphs, creating a rewrite rule set, and program extraction. The paper demonstrates the automated reasoning capabilities of equivalence graphs and explains why they are useful for optimizing compilers. In general, this paper spends much of its length elaborating on the low-level implementation details of the union-find data structure and e-graph interface. It also provides some empirical results on the runtime complexity of growing the e-graph. Egg continues to be supported on GitHub, and the library is hosted as a Rust crate.}
}

@inproceedings{esyn,
  author    = {Chen, Chen and Hu, Guangyu and Zuo, Dongsheng and Yu, Cunxi and Ma, Yuzhe and Zhang, Hongce},
  title     = {E-Syn: E-Graph Rewriting with Technology-Aware Cost Functions for Logic Synthesis},
  year      = {2024},
  isbn      = {9798400706011},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3649329.3656246},
  doi       = {10.1145/3649329.3656246},
  abstract  = {Logic synthesis plays a crucial role in the digital design flow. It has a decisive influence on the final Quality of Results (QoR) of the circuit implementations. However, existing multi-level logic optimization algorithms often employ greedy approaches with a series of local optimization steps. Each step breaks the circuit into small pieces (e.g.,k-feasible cuts) and applies incremental changes to individual pieces separately. These local optimization steps could limit the exploration space and may miss opportunities for significant improvements. To address the limitation, this paper proposes using e-graph in logic synthesis. The new workflow, named E-Syn, makes use of the well-established e-graph infrastructure to efficiently perform logic rewriting. It explores a diverse set of equivalent Boolean representations while allowing technology-aware cost functions to better support delay-oriented and area-oriented logic synthesis. Experiments over a wide range of benchmark designs show our proposed logic optimization approach reaches a wider design space compared to the commonly used AIG-based logic synthesis flow. It achieves on average 15.29\% delay saving in delay-oriented synthesis and 6.42\% area saving for area-oriented synthesis.},
  booktitle = {Proceedings of the 61st ACM/IEEE Design Automation Conference},
  articleno = {124},
  numpages  = {6},
  keywords  = {E-graph, technology-aware, logic synthesis},
  location  = {San Francisco, CA, USA},
  series    = {DAC '24},
  annote    = {E-Syn is the first work to apply e-graph driven compilers to synthesis tasks. It applies technology-independent rewrites to Boolean logic before cell mapping occurs. Since logic synthesis and placement algorithms are largely heuristic, there is well-known structural bias present in the core EDA tools. As a solution, E-Syn is attempting to predict which type of circuit structures map to an ASIC floorplan efficiently. In short, E-Syn will rewrite an AIG (And-Inverter Graph) before final synthesis in hopes of improving QoR (quality of results). In general, this technique is an indirect solution, as it does not alter the core synthesis algorithm. E-Syn has the potential to degrade QoR for some circuit inputs. In contrast, our work applies rewriting after technology mapping has occured, meaning the predictive element is removed.}
}

@inproceedings{smoothe,
  author    = {Cai, Yaohui and Yang, Kaixin and Deng, Chenhui and Yu, Cunxi and Zhang, Zhiru},
  title     = {SmoothE: Differentiable E-Graph Extraction},
  year      = {2025},
  isbn      = {9798400706981},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3669940.3707262},
  doi       = {10.1145/3669940.3707262},
  abstract  = {E-graphs have gained increasing popularity in compiler optimization, program synthesis, and theorem proving tasks. They enable compact representation of many equivalent expressions and facilitate transformations via rewrite rules without phase ordering limitations. A major benefit of using e-graphs is the ability to explore a large space of equivalent expressions, allowing the extraction of an expression that best meets certain optimization objectives (or cost models). However, current e-graph extraction methods often face unfavorable scalability-quality trade-offs and only support simple linear cost functions, limiting their applicability to more realistic optimization problems.In this work, we propose SmoothE, a differentiable e-graph extraction algorithm designed to handle complex cost models and optimized for GPU acceleration. More specifically, we approach the e-graph extraction problem from a probabilistic perspective, where the original discrete optimization is relaxed to a continuous differentiable form. This formulation supports any differentiable cost functions and enables efficient searching for solutions using gradient descent. We implement SmoothE in PyTorch to leverage the advancements of the modern machine learning ecosystem. Additionally, we introduce performance optimization techniques to exploit sparsity and data parallelism. We evaluate SmoothE on a variety of realistic e-graphs from five different applications using three distinct cost models, including both linear and non-linear ones. Our experiments demonstrate that SmoothE consistently achieves a favorable trade-off between scalability and solution quality.},
  booktitle = {Proceedings of the 30th ACM International Conference on Architectural Support for Programming Languages and Operating Systems, Volume 1},
  pages     = {1020-1034},
  numpages  = {15},
  keywords  = {compilers, equivalence graph, machine learning for systems, programming languages},
  location  = {Rotterdam, Netherlands},
  series    = {ASPLOS '25},
  annote    = {For program and circuit optimization, an e-graph driven technique simply defers the NP-hardness to the extraction phase. In extraction, heuristics may be re-introduced. The most vanilla extraction option in the egg library is a greedy cost evaluation. There is an ILP (integer linear programming) option, but it is not well supported as it only works for the smallest of e-graphs. Nonetheless, extraction being decoupled from e-graph building allows heuristics to be studied better in isolation. SmoothE improves upon these two extraction options by relaxing the extraction problem to a differentiable optimization problem that can be parallelized to GPUs. It is not integrated with the Rust language, meaning more software engineering work remains to test the real world usefulness of SmoothE.}
}


@article{sparsextract,
  author     = {Goharshady, Amir Kafshdar and Lam, Chun Kit and Parreaux, Lionel},
  title      = {Fast and Optimal Extraction for Sparse Equality Graphs},
  year       = {2024},
  issue_date = {October 2024},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {8},
  number     = {OOPSLA2},
  url        = {https://doi.org/10.1145/3689801},
  doi        = {10.1145/3689801},
  abstract   = {Equality graphs (e-graphs) are used to compactly represent equivalence classes of terms in symbolic reasoning systems. Beyond their original roots in automated theorem proving, e-graphs have been used in a variety of applications. They have become particularly important as the key ingredient in the popular technique of equality saturation, which has notable applications in compiler optimization, program synthesis, program verification, and symbolic execution, among others. In a typical equality saturation workflow, an e-graph is used to store a large number of equalities that are generated by local rewrites during a saturation phase, after which an optimal term is extracted from the e-graph as the output of the technique. However, despite its crucial role in equality saturation, e-graph extraction has received relatively little attention in the literature, which we seek to start addressing in this paper. Extraction is a challenging problem and is notably known to be NP-hard in general, so current equality saturation tools rely either on slow optimal extraction algorithms based on integer linear programming (ILP) or on heuristics that may not always produce the optimal result. In fact, in this paper, we show that e-graph extraction is hard to approximate within any constant ratio. Thus, any such heuristic will produce wildly suboptimal results in the worst case. Fortunately, we show that the problem becomes tractable when the e-graph is sparse, which is the case in many practical applications. We present a novel parameterized algorithm for extracting optimal terms from e-graphs with low treewidth, a measure of how “tree-like” a graph is, and prove its correctness. We also present an efficient Rust implementation of our algorithm and evaluate it against ILP on a number of benchmarks extracted from the Cranelift benchmark suite, a real-world compiler optimization library based on equality saturation. Our algorithm optimally extracts e-graphs with treewidths of up to 10 in a fraction of the time taken by ILP. These results suggest that our algorithm can be a valuable tool for equality saturation users who need to extract optimal terms from sparse e-graphs.},
  journal    = {Proc. ACM Program. Lang.},
  month      = oct,
  articleno  = {361},
  numpages   = {27},
  keywords   = {e-graphs, equality saturation, extraction, treewidth},
  annote     = {This work re-conceptualizes e-graphs for the sake of understanding the complexity of extraction. The authors attempt to measure the extent to which e-graphs are more "tree-like" or "path-like." This quality is dependent on the specific instance of the e-graph problem, and consequently it impacts the difficulty of extraction. In short, this paper proposes an extraction technique specific to sparse e-graphs. As an aside, the paper also comments on the complexity of extraction in general, suggesting that some problem domains will be inherently impossible to generalize to with extraction heuristics. }
}

@inproceedings{egraphmath,
  author    = {Briggs, Ian and Panchekha, Pavel},
  title     = {Synthesizing mathematical identities with e-graphs},
  year      = {2022},
  isbn      = {9781450392709},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3520308.3534506},
  doi       = {10.1145/3520308.3534506},
  abstract  = {Identities compactly describe properties of a mathematical expression and can be leveraged into faster and more accurate function implementations. However, identities must currently be discovered manually, which requires a lot of expertise. We propose a two-phase synthesis and deduplication pipeline that discovers these identities automatically. In the synthesis step, a set of rewrite rules is composed, using an e-graph, to discover candidate identities. However, most of these candidates are duplicates, which a secondary de-duplication step discards using integer linear programming and another e-graph. Applied to a set of 61 benchmarks, the synthesis phase generates 7215 candidate identities which the de-duplication phase then reduces down to 125 core identities.},
  booktitle = {Proceedings of the 1st ACM SIGPLAN International Symposium on E-Graph Research, Applications, Practices, and Human-Factors},
  pages     = {1-6},
  numpages  = {6},
  keywords  = {synthesis, e-graphs, approximation theory},
  location  = {San Diego, CA, USA},
  series    = {EGRAPHS 2022}
}

@article{cclemma,
  author     = {Kurashige, Cole and Ji, Ruyi and Giridharan, Aditya and Barbone, Mark and Noor, Daniel and Itzhaky, Shachar and Jhala, Ranjit and Polikarpova, Nadia},
  title      = {CCLemma: E-Graph Guided Lemma Discovery for Inductive Equational Proofs},
  year       = {2024},
  issue_date = {August 2024},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {8},
  number     = {ICFP},
  url        = {https://doi.org/10.1145/3674653},
  doi        = {10.1145/3674653},
  journal    = {Proc. ACM Program. Lang.},
  month      = aug,
  articleno  = {264},
  numpages   = {27},
  keywords   = {Automated Theorem Proving, Equational Reasoning, Lemma Synthesis, Synthesis, Verification}
}

@inproceedings{approxmap,
  author    = {Pasandi, Ghasem and Nazarian, Shahin and Pedram, Massoud},
  booktitle = {20th International Symposium on Quality Electronic Design (ISQED)},
  title     = {Approximate Logic Synthesis: A Reinforcement Learning-Based Technology Mapping Approach},
  year      = {2019},
  volume    = {},
  number    = {},
  pages     = {26-32},
  keywords  = {Error analysis;Delays;Logic gates;Machine learning algorithms;Hamming distance;Tools},
  doi       = {10.1109/ISQED.2019.8697679}
}


@inproceedings{powermap,
  author    = {Tiwari, V. and Ashar, P. and Malik, S.},
  booktitle = {30th ACM/IEEE Design Automation Conference},
  title     = {Technology Mapping for Low Power},
  year      = {1993},
  volume    = {},
  number    = {},
  pages     = {74-79},
  keywords  = {Power measurement;Circuit synthesis;Delay;Energy consumption;Libraries;Automatic logic units;Logic devices;Logic design;Vegetation mapping;National electric code},
  doi       = {10.1109/DAC.1993.203922}
}

@inproceedings{areamap,
  author    = {Pedram, Massoud and Bhat, Narasimha},
  title     = {Layout driven technology mapping},
  year      = {1991},
  isbn      = {0897913957},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/127601.127635},
  doi       = {10.1145/127601.127635},
  booktitle = {Proceedings of the 28th ACM/IEEE Design Automation Conference},
  pages     = {99–105},
  numpages  = {7},
  location  = {San Francisco, California, USA},
  series    = {DAC '91}
}

